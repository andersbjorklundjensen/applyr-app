version: "3"

services:
  backend: 
    build: 
      context: .
      dockerfile: ./backend/Dockerfile.dev
    ports: 
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    command: nodemon -L src/bin/www.js
    networks: 
      - app-network
    environment:
      - MONGO_URI=mongodb://db/${DB_NAME}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_HOST=minio
      - MINIO_PORT=${MINIO_PORT}
      - BACKEND_PORT=${BACKEND_PORT}
    restart: always
    depends_on:
      - db
    volumes:
      - ./backend/src:/app/backend/src

  frontend:
    build: 
      context: .
      dockerfile: ./frontend/Dockerfile.dev
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    restart: always
    networks:
      - app-network
    environment:
      - REACT_APP_API_IP=http://${IP_ADDRESS}:${BACKEND_PORT}
    volumes: 
      - ./frontend/src:/app/frontend/src
    command: npm run start
    stdin_open: true

  db:
    image: mongo
    restart: always
    networks:
      - app-network

  minio:
    image: minio/minio
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    entrypoint: sh
    networks: 
      - app-network
    command: -c "mkdir -p /data/screenshots && 
                 mkdir -p /data/files &&
                 mkdir -p /data/backups &&
                 /usr/bin/minio server /data"
  
  backend-test: 
    build: 
      context: .
      dockerfile: ./backend/Dockerfile.dev
    volumes:
      - ./backend/src:/app/backend/src
    command: npm run coverage
    networks: 
      - app-network
    environment:
      - MONGO_URI=mongodb://db/${DB_NAME}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_HOST=minio
      - MINIO_PORT=${MINIO_PORT}
    restart: always
    depends_on:
      - db

networks:
  app-network:
    driver: bridge